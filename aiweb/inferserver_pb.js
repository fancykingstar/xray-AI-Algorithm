/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.inferserver.CarinaResult', null, global);
goog.exportSymbol('proto.inferserver.ChestFrontalResult', null, global);
goog.exportSymbol('proto.inferserver.ETTubeResult', null, global);
goog.exportSymbol('proto.inferserver.ETTubeTipResult', null, global);
goog.exportSymbol('proto.inferserver.FreeAirResult', null, global);
goog.exportSymbol('proto.inferserver.LungFieldResult', null, global);
goog.exportSymbol('proto.inferserver.PneumothoraxResult', null, global);
goog.exportSymbol('proto.inferserver.RotationResult', null, global);
goog.exportSymbol('proto.inferserver.carinaReply', null, global);
goog.exportSymbol('proto.inferserver.chestFrontalReply', null, global);
goog.exportSymbol('proto.inferserver.dcmRequest', null, global);
goog.exportSymbol('proto.inferserver.ettubeReply', null, global);
goog.exportSymbol('proto.inferserver.ettubeTipReply', null, global);
goog.exportSymbol('proto.inferserver.freeAirReply', null, global);
goog.exportSymbol('proto.inferserver.lungFieldReply', null, global);
goog.exportSymbol('proto.inferserver.ptxReply', null, global);
goog.exportSymbol('proto.inferserver.rotationReply', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.dcmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.dcmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.dcmRequest.displayName = 'proto.inferserver.dcmRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.dcmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.dcmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.dcmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.dcmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dcmname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.dcmRequest}
 */
proto.inferserver.dcmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.dcmRequest;
  return proto.inferserver.dcmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.dcmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.dcmRequest}
 */
proto.inferserver.dcmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDcmname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.dcmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.dcmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.dcmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.dcmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDcmname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string dcmname = 1;
 * @return {string}
 */
proto.inferserver.dcmRequest.prototype.getDcmname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.inferserver.dcmRequest.prototype.setDcmname = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.rotationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.rotationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.rotationReply.displayName = 'proto.inferserver.rotationReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.rotationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.rotationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.rotationReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.rotationReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.rotationReply}
 */
proto.inferserver.rotationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.rotationReply;
  return proto.inferserver.rotationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.rotationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.rotationReply}
 */
proto.inferserver.rotationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.RotationResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.rotationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.rotationReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.rotationReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.rotationReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional RotationResult result = 1;
 * @return {!proto.inferserver.RotationResult}
 */
proto.inferserver.rotationReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.RotationResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.RotationResult} value */
proto.inferserver.rotationReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.rotationReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.rotationReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.chestFrontalReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.chestFrontalReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.chestFrontalReply.displayName = 'proto.inferserver.chestFrontalReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.chestFrontalReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.chestFrontalReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.chestFrontalReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.chestFrontalReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.chestFrontalReply}
 */
proto.inferserver.chestFrontalReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.chestFrontalReply;
  return proto.inferserver.chestFrontalReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.chestFrontalReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.chestFrontalReply}
 */
proto.inferserver.chestFrontalReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.ChestFrontalResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.chestFrontalReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.chestFrontalReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.chestFrontalReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.chestFrontalReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional ChestFrontalResult result = 1;
 * @return {!proto.inferserver.ChestFrontalResult}
 */
proto.inferserver.chestFrontalReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.ChestFrontalResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.ChestFrontalResult} value */
proto.inferserver.chestFrontalReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.chestFrontalReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.chestFrontalReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.lungFieldReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.lungFieldReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.lungFieldReply.displayName = 'proto.inferserver.lungFieldReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.lungFieldReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.lungFieldReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.lungFieldReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.lungFieldReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.lungFieldReply}
 */
proto.inferserver.lungFieldReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.lungFieldReply;
  return proto.inferserver.lungFieldReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.lungFieldReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.lungFieldReply}
 */
proto.inferserver.lungFieldReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.LungFieldResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.lungFieldReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.lungFieldReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.lungFieldReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.lungFieldReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional LungFieldResult result = 1;
 * @return {!proto.inferserver.LungFieldResult}
 */
proto.inferserver.lungFieldReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.LungFieldResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.LungFieldResult} value */
proto.inferserver.lungFieldReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.lungFieldReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.lungFieldReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.ptxReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.ptxReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.ptxReply.displayName = 'proto.inferserver.ptxReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.ptxReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.ptxReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.ptxReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ptxReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    heatmappath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.ptxReply}
 */
proto.inferserver.ptxReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.ptxReply;
  return proto.inferserver.ptxReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.ptxReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.ptxReply}
 */
proto.inferserver.ptxReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.PneumothoraxResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeatmappath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.ptxReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.ptxReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.ptxReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ptxReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeatmappath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional PneumothoraxResult result = 1;
 * @return {!proto.inferserver.PneumothoraxResult}
 */
proto.inferserver.ptxReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.PneumothoraxResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.PneumothoraxResult} value */
proto.inferserver.ptxReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.ptxReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.ptxReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string heatmapPath = 3;
 * @return {string}
 */
proto.inferserver.ptxReply.prototype.getHeatmappath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.inferserver.ptxReply.prototype.setHeatmappath = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.freeAirReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.freeAirReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.freeAirReply.displayName = 'proto.inferserver.freeAirReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.freeAirReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.freeAirReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.freeAirReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.freeAirReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    heatmappath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.freeAirReply}
 */
proto.inferserver.freeAirReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.freeAirReply;
  return proto.inferserver.freeAirReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.freeAirReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.freeAirReply}
 */
proto.inferserver.freeAirReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.FreeAirResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeatmappath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.freeAirReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.freeAirReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.freeAirReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.freeAirReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeatmappath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FreeAirResult result = 1;
 * @return {!proto.inferserver.FreeAirResult}
 */
proto.inferserver.freeAirReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.FreeAirResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.FreeAirResult} value */
proto.inferserver.freeAirReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.freeAirReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.freeAirReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string heatmapPath = 3;
 * @return {string}
 */
proto.inferserver.freeAirReply.prototype.getHeatmappath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.inferserver.freeAirReply.prototype.setHeatmappath = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.carinaReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.carinaReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.carinaReply.displayName = 'proto.inferserver.carinaReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.carinaReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.carinaReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.carinaReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.carinaReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    heatmappath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.carinaReply}
 */
proto.inferserver.carinaReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.carinaReply;
  return proto.inferserver.carinaReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.carinaReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.carinaReply}
 */
proto.inferserver.carinaReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.CarinaResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeatmappath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.carinaReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.carinaReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.carinaReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.carinaReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeatmappath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional CarinaResult result = 1;
 * @return {!proto.inferserver.CarinaResult}
 */
proto.inferserver.carinaReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.CarinaResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.CarinaResult} value */
proto.inferserver.carinaReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.carinaReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.carinaReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string heatmapPath = 3;
 * @return {string}
 */
proto.inferserver.carinaReply.prototype.getHeatmappath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.inferserver.carinaReply.prototype.setHeatmappath = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.ettubeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.ettubeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.ettubeReply.displayName = 'proto.inferserver.ettubeReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.ettubeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.ettubeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.ettubeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ettubeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    heatmappath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.ettubeReply}
 */
proto.inferserver.ettubeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.ettubeReply;
  return proto.inferserver.ettubeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.ettubeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.ettubeReply}
 */
proto.inferserver.ettubeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.ETTubeResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeatmappath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.ettubeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.ettubeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.ettubeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ettubeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeatmappath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ETTubeResult result = 1;
 * @return {!proto.inferserver.ETTubeResult}
 */
proto.inferserver.ettubeReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.ETTubeResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.ETTubeResult} value */
proto.inferserver.ettubeReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.ettubeReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.ettubeReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string heatmapPath = 3;
 * @return {string}
 */
proto.inferserver.ettubeReply.prototype.getHeatmappath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.inferserver.ettubeReply.prototype.setHeatmappath = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inferserver.ettubeTipReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inferserver.ettubeTipReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.inferserver.ettubeTipReply.displayName = 'proto.inferserver.ettubeTipReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inferserver.ettubeTipReply.prototype.toObject = function(opt_includeInstance) {
  return proto.inferserver.ettubeTipReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inferserver.ettubeTipReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ettubeTipReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confidencescore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    heatmappath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inferserver.ettubeTipReply}
 */
proto.inferserver.ettubeTipReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inferserver.ettubeTipReply;
  return proto.inferserver.ettubeTipReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inferserver.ettubeTipReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inferserver.ettubeTipReply}
 */
proto.inferserver.ettubeTipReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.inferserver.ETTubeTipResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidencescore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeatmappath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inferserver.ettubeTipReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inferserver.ettubeTipReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inferserver.ettubeTipReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inferserver.ettubeTipReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfidencescore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeatmappath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ETTubeTipResult result = 1;
 * @return {!proto.inferserver.ETTubeTipResult}
 */
proto.inferserver.ettubeTipReply.prototype.getResult = function() {
  return /** @type {!proto.inferserver.ETTubeTipResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.inferserver.ETTubeTipResult} value */
proto.inferserver.ettubeTipReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float confidenceScore = 2;
 * @return {number}
 */
proto.inferserver.ettubeTipReply.prototype.getConfidencescore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.inferserver.ettubeTipReply.prototype.setConfidencescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string heatmapPath = 3;
 * @return {string}
 */
proto.inferserver.ettubeTipReply.prototype.getHeatmappath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.inferserver.ettubeTipReply.prototype.setHeatmappath = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.inferserver.RotationResult = {
  UPRIGHT: 0,
  CLOCKWISE_270: 1,
  UPSIDE_DOWN: 2,
  CLOCKWISE_90: 3
};

/**
 * @enum {number}
 */
proto.inferserver.ChestFrontalResult = {
  FRONTAL: 0,
  NON_FRONTAL: 1
};

/**
 * @enum {number}
 */
proto.inferserver.LungFieldResult = {
  LUNG_FIELDS_OK: 0,
  LUNG_FIELDS_CLIPPED: 1
};

/**
 * @enum {number}
 */
proto.inferserver.PneumothoraxResult = {
  PNEUMOTHORAX_PRESENT: 0,
  PNEUMOTHORAX_ABSENT: 1
};

/**
 * @enum {number}
 */
proto.inferserver.FreeAirResult = {
  FREEAIR_PRESENT: 0,
  FREEAIR_ABSENT: 1
};

/**
 * @enum {number}
 */
proto.inferserver.CarinaResult = {
  CARINA_PRESENT: 0,
  CARINA_ABSENT: 1
};

/**
 * @enum {number}
 */
proto.inferserver.ETTubeResult = {
  ETTUBE_PRESENT: 0,
  ETTUBE_ABSENT: 1
};

/**
 * @enum {number}
 */
proto.inferserver.ETTubeTipResult = {
  ETTUBE_TIP_PRESENT: 0,
  ETTUBE_TIP_ABSENT: 1
};

goog.object.extend(exports, proto.inferserver);

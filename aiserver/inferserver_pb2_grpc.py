# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import inferserver_pb2 as inferserver__pb2


class InferChestFrontalStub(object):
  """The inference service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferChestFrontal/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.chestFrontalReply.FromString,
        )


class InferChestFrontalServicer(object):
  """The inference service definition.
  """

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferChestFrontalServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.chestFrontalReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferChestFrontal', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferRotationStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferRotation/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.rotationReply.FromString,
        )


class InferRotationServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferRotationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.rotationReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferRotation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferLungFieldStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferLungField/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.lungFieldReply.FromString,
        )


class InferLungFieldServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferLungFieldServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.lungFieldReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferLungField', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferPneumothoraxStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferPneumothorax/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.ptxReply.FromString,
        )


class InferPneumothoraxServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferPneumothoraxServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.ptxReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferPneumothorax', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferFreeAirStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferFreeAir/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.freeAirReply.FromString,
        )


class InferFreeAirServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferFreeAirServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.freeAirReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferFreeAir', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferCarinaStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferCarina/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.carinaReply.FromString,
        )


class InferCarinaServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferCarinaServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.carinaReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferCarina', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferETTubeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferETTube/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.ettubeReply.FromString,
        )


class InferETTubeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferETTubeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.ettubeReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferETTube', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InferETTubeTipStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inferDCM = channel.unary_unary(
        '/inferserver.InferETTubeTip/inferDCM',
        request_serializer=inferserver__pb2.dcmRequest.SerializeToString,
        response_deserializer=inferserver__pb2.ettubeTipReply.FromString,
        )


class InferETTubeTipServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inferDCM(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferETTubeTipServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inferDCM': grpc.unary_unary_rpc_method_handler(
          servicer.inferDCM,
          request_deserializer=inferserver__pb2.dcmRequest.FromString,
          response_serializer=inferserver__pb2.ettubeTipReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inferserver.InferETTubeTip', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
